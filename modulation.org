# -*- eval: (setq org-download-image-dir (file-name-sans-extension (buffer-name))); -*-
# -*- org-export-babel-evaluate: nil; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../orgstyle.css"/>
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline author:t c:nil S:nil -:nil
#+OPTIONS: creator:nil d:(not "En") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t 
#+OPTIONS: ^:{}
#+LATEX_CLASS: ctexart
#+STARTUP: entitiespretty:t
#+TITLE: 信号调制
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.50.2 (Org mode 9.0.4)

* 信号调制
  #+BEGIN_SRC dot :file Images/mod_class.png :results file
  digraph G {
  m [label="模拟调制"];
  s [label="数字调制"];
  Ampli_M [label="调幅"];
  Freq_M [label="调频"];
  Phase_M [label="调相"];
  AM [label="AM\n常规双边带调幅"];
  DSB_SC [label="DSB_SC\n抑制载波双边带调幅"];
  SSB[label="SSB\n(SSB_SC)"];
  VSB[label="VSB"];
  m->{Ampli_M,Freq_M,Phase_M};
  Ampli_M->AM;
  Ampli_M->DSB_SC;
  Ampli_M->SSB->{USB,LSB};
  Ampli_M->VSB;

  }
  #+END_SRC

  #+RESULTS:
  [[file:Images/mod_class.png]]
** 调幅
*** AM
    载波信号为 $c(t)=\cos(2\pi f_ct+\theta_c)$ , $f_c$ 为载波频率，$\theta_c$ 为载波起始相位。为方便讨论，假设 $\theta_c=0$ .

    调制信号的波形为 $x(t)$ ,调制时，外加直流分量 $A_0$ ,输出已调信号的包络正比于 $x(t)$ ,其时域波形为：
    \begin{equation}
    s_{AM}(t)=[A_0+x(t)]\cos2\pi f_ct
    \end{equation}
    通常将 $S_{AM}(t)$ 写成
    \begin{equation}\label{eq-sAMt}
    s_{AM}(t)=[1+mx(t)]\cos2\pi f_ct
    \end{equation}
    其中， $m$ 为调制深度，使用包络检波等方法能恢复出原始信号，但为了保证不失真，必须满足 $1+mx(t)\geq 0$ .
    已知信号 $x(t)$ 的频谱为 $X(f)$ ,则已调制信号的频谱为
    \begin{equation}
    S_{AM}(f)=\frac{1}{2}[\delta(f-f_c)+\delta(f+f_c)]+\frac{m}{2}[X(f-f_c)+X(f+f_c)]
    \end{equation}

    式 ref:eq-sAMt 可以重写为
    \begin{equation}
    s_{AM}(t)=\Re{[1+mx(t)]\exp(j2\pi f_ct)]
    \end{equation}

    可知，已调信号的瞬时幅度是 $|1+mx(t)|$ , 瞬时相位是 $2\pi f_c t$ 。
    *瞬时幅度是时变函数，去除载波线性相位后的瞬时相位是常数。*


*** DSB-SC
    AM调制又称常规双边带调幅。由于调制过程外加了直流分量，使得已调信号的频谱中含载波成分，但是载波不携带任何信息，信息完全由边带传输。通过抑制载波可以达到节省功率的目的。

    从 ref:eq-sDSB_SCt 式中去除直流分量得到DSB-SC的时域波形：
    \begin{equation}\label{eq-sDSB_SCt}
    s_{\text{DSB}}(t)=mx(t)\cos2\pi f_ct
    \end{equation}

*** SSB-SC
    在DSB-SC的基础上进一步滤除一个边带就能得到USB（上边带调制）和LSB（下边带调制）。
    简而言之，单边带信号的频谱为：
    \begin{equation}
 S_{\text{SSB}}(f)=S_{\text{DSB}}(f)H_{\text{DSB}}(f)
 \end{equation}
    其中
    \begin{equation}
    H_{\text{DSB}}(f)=\begin{cases}
    H_{\text{USB}}(f)=&\begin{cases}
      1, & |f|>f_c\\
      0, & |f|\leq f_c\end{cases}\\
    H_{\text{LSB}}(f)=&\begin{cases}
      1, & |f|<f_c\\
      0, & |f|\geq f_c\end{cases}
      \end{cases}
    \end{equation}

    时域表达式为
    \begin{align}
    s_{\text{USB}}(t)=&s_{\text{DSB}}(t)*h_\text{USB}(t)\\\notag
    =&[x(t)\cos2\pi f_ct ]*[\delta(t)-\frac{1}{\pi}\frac{\sin 2\pi f_ct}{t}]\\\notag
    =&\frac{1}{2} x(t)\cos2\pi f_ct-\frac{1}{2} \hat{x}(t)\sin2\pi f_ct
    \end{align}
    \begin{align}
    s_{\text{LSB}}(t)=&s_{\text{DSB}}(t)*h_\text{LSB}(t)\\\notag
    =&\frac{1}{2} x(t)\cos2\pi f_ct+\frac{1}{2} \hat{x}(t)\sin2\pi f_ct
    \end{align}
    其中 $\hat{x}(t)$ 为 $x(t)$ 的希尔伯特变换。

*** VSB
    残余边带调制 VSB=SSB+载波。

    | 调制类型 | 优点           | 缺点         |
    |----------+----------------+--------------|
    | AM       | 解调方便       | 功耗高       |
    | DSB-SC   | 低功耗         | 冗余边带     |
    | SSB-SC   | 低功耗、低带宽 | 载波位置未知 |
    | VSB      | 低功耗、低带宽 |              |

** FM
   如果调制后*信号的幅度不变*，而瞬时频率是调制信号的线性函数，这样的调制方式称为频率调制。

   调频信号的时域表达式为：
   \begin{equation}\label{eq-sFMt}
   s_{FM}(t)=A\cos[2\pi f_ct+2\pi k_f\int_{-\infty}^{t}x(\tau)d\tau]
   \end{equation}
   假设复信号 $\exp(j2\pi k_f\int_{-\infty}^{t}x(\tau)d\tau)$ 的频谱为 $G(f)$ ,则

   \begin{equation}
   S_{FM}(f)=A\frac{1}{2}[G(f-f_c)+G(f+f_c)]
   \end{equation}

   下面对FM信号进行频谱分析[fn:1], 假设调制信号是一个简单的正弦信号，频率为 $f_m$ 即，$x(t)=A_m\cos2\pi f_mt$
   式 ref:eq-sFMt 的瞬时相位为：
   \begin{equation}
   \Phi(t)=2\pi f_ct+2\pi k_f\int_{-\infty}^{t}x(\tau)d\tau
   \end{equation}

   则瞬时频率为
   \begin{align}
   \frac{1}{2\pi}\frac{d\Phi(t)}{dt}=&f_c+k_fx(t)\\\notag
   =&f_c+k_fA_m\cos2\pi f_mt
   \end{align}
   上式说明瞬时频率在 $f_c$ 附近上下变化，变化幅度为 $k_fA_m$ ―信号的频偏峰值，记为 $\Delta f=k_fA_m$[fn:5].
   上式两边积分，又可得出（假定零时刻相位为零）：
   \begin{equation}
   \Phi(t)=2\pi f_ct+\frac{\Delta f}{f_m}\sin2\pi f_mt
   \end{equation}
   定义调制指数（或调频指数） $\beta=\frac{\Delta f}{f_m}$ 因此，ref:eq-sFMt 可以写成
   \begin{equation}
   s_{FM}(t)=A\cos[2\pi f_ct+\beta\sin(2\pi f_mt)]
   \end{equation}

   经过复杂的推导[fn:2]，上式可以写成：
   \begin{equation}
   \cos[2\pi f_ct+\beta\sin(2\pi f_mt)]=\sum_{-\infty}^{\infty}J_{n}(\beta)\cos(2\pi(f_c+nf_m)t)
   \end{equation}

   其中， $J_n(\beta)$ 为第一类贝塞尔函数[fn:3][fn:4]。理论上，无论是发射还是接收FM信号都需要无限大的带宽，但是我们有
   \begin{equation}
   |J_n(\beta)|\to0 \text{   as   } n\to\infty
   \end{equation}

   这个趋势又可粗略分为两种情况：当 $\beta$ 取值较小时，贝塞尔函数迅速衰减；当 $\beta$ 取值较大时，贝塞尔函数会出现先增大后减小的变化趋势。

   1. 窄带FM
      在许多实际情况下，调频系数较小， $|\beta|$ 都满足远远小于1的条件（即 $\delta f\llf_m$ ） ，这被称为窄带调频信号。对于窄带调频，我们有
      \begin{equation}
      J_0(\beta)\approx1,\qquard J_1(\beta)\approx\frac{\beta}{2}, \qquard J_n(\beta)\approx0\text{, for }n>1
      \end{equation}

      \begin{equation}
      s_{FM}(t)\approx AJ_0(\beta)\cos(2\pi f_ct) + AJ_1(\beta)[\cos(2\pi(f_c+f_m)t)-\cos(2\pi(f_c-f_m)t)]
      \end{equation}
      因此对于窄带FM, 可认为信号只存在 $f_c$, $f_c\pm f_m$ 的频率分量，发送窄带FM信号需要的带宽是 $2f_m$ 。

   2. 宽带FM
      $|\beta|$ 的值较大，则FM信号的频域覆盖变化范围较大，信号带宽 $2\delta f$ 。

   3. [[http://www.daenotes.com/electronics/communication-system/carsons-rule][Carson's Rule]]
      这是一个基于实验结果的准则，该准则指出实际中发射FM/PM信号的最小带宽是：
      \begin{equation}
      B=2(f_m+\delta f)
      \end{equation}


   #+BEGIN_SRC python :session report :exports results :results file
   from __future__ import division
   import numpy as np
   import matplotlib.pyplot as plt

   beta=1
   fm=1000

   A=1
   fc=20000
   fs=67000
   dt=1/fs

   N=2048
   t=np.array(range(N))*dt
   faxis=np.linspace(0,fs,N)
   sig=A*np.cos(2*np.pi*fc*t+beta*np.sin(2*np.pi*fm*t))

   X=np.fft.fft(sig)
   plt.close('all')
   plt.plot(faxis,(np.abs(X)))
   plt.axis('tight')
   plt.savefig("FM_spec.png")
   "FM_spec.png"
   #+END_SRC

   #+RESULTS:
   [[file:FM_spec.png]]




** 小结
   可以使用GNURadio 生成多种不同类型的调制信号cite:gandhiraj12_analog_digit_modul_toolk_softw_defin_radio。

* 调制识别
  How to capture raw IQ data from a RTL-SDR dongle and FM demodulate with MATLAB http://www.aaronscher.com/wireless_com_SDR/RTL_SDR_AM_spectrum_demod.html
  Broadcast FM RDS Decode http://www.joshisanerd.com/projects/sdr_snippets/gnuradio_and_ipython//2%20Broadcast%20FM%20RDS%20Decode.html

  Ieee xplore
  Modulation recognition using hierarchical deep neural networks

  https://blog.kickview.com/modulation-recognition-using-deep-learning/

  通信信号调制识别方法研究
  http://www.xzbu.com/8/view-4919117.htmA

** TODO AMC+ML
  dataset 研究调制体制识别的数据集
  1. [[file:backgroud.org][使用代码生成 dataset]]
  2. 学习深度学习
  3. 学习GNU radio
     总结 c++ 的 OOT module 编写方式
  4.  信号检测－>调制识别： 学习 gr-inspector
     解读 [[file:~/gr-inspector/lib/signal_detector_cvf_impl.cc][signal_detector_cvf_impl]] 
*** 解读 signal_detector
    - make()
    - signal_detector_cvf_impl()
      - set properties
      - allocate buffers
      - d_fft
      - d-avg_filter
      - build_window()
      - message register
      - write log header
    - [[file:~/gr-inspector/lib/signal_detector_cvf_impl.cc::357][work()]]
      - build_freq()
      - periodogram()
      - averaging, threshold
      - find_signal_edges()
        该函数返回 vector<vector int> flank :
        1. 遍历频谱，找到高于门限的频率位置 pos
        2. 根据 pos 得出信号边沿 flank：
           - pos 为空，则 flank 也为空；
           - pos size=1, flank=[pos[0],pos[0]]
           - pos size=2, 如果pos 中存储的两个频率位置是相邻的，则认为 pos 存储的是同一信号的两个边沿  flank=[pos[0],pos[1]]；否则，flank=[pos[0],pos[0], pos[1],pos[1]] （认为是两个信号）
           - pos size >2, 根据 pos[i] pos[i+1] 是否相邻，给出所有信号的边沿对。
        3. rf_map: vector<vector float> 是一组(中心频率，带宽)对构成的 vector，列入这个 vector 的信号带宽有一个下限 d_min_bw, 其大小在本模块构造时提供。
      - 模块的 out 为 fft 频谱。
      - 当 rf_map 发生变化时（有新的信号检测到，或已检出的信号发生了变化）。打包并发送 message，写 logfile.
        
  
* 信号解调
** AM
   http://www.ece.uvic.ca/~elec350/lab_manual/ar01s01s05.html

   从一个[[file:gnuradio/AM_RX.grc][实例 ]]开始：
   [[file:modulation.org_imgs/20170828_093208_3244saB.png]]
   上面使用 GNU Radio 的 GRC 工具实现了一个AM信号的解调。从中可以看出，AM信号解调的主要步骤是：
   1. 取幅值
      已调信号的一般形式：
      \begin{equation}
      s_{AM}(t)=A_c[1+mx(t)]\cos(2\pi f_ct+\theta_c)
      \end{equation}
      其复信号表示为：

      \begin{equation}
      s_{AM}(t)=A_c[1+mx(t)]\exp[j(2\pi f_ct+\theta_c)]
      \end{equation}

      下变频：

      \begin{align}
      \tilde{s}_{AM}(t)=&s_{AM}(t)\exp(-j2\pi f_ct_)\\\notag
                       =&A_c[1+mx(t)]\exp(j\theta_c)
      \end{align}

      所以去幅值之后，可以得到 $|A_c[1+m(t)]|$ 。可以看到，取幅值可以消除未知相位 $\theta_c$ 的影响，而且即使混频过程中，载波频率估计存在频差 $\Delta f$ , 在取幅值后频差的影响也可以消除。 
   2. 去DC
      去除直流分量后，就剩下了 $A_cm(t)$ ,此时已经恢复了原信号，只需要做适当的幅度增益调整就能得到调制信号。

** DSB
   基本过程同上，没有去除零频的步骤。
** SSB
   [[file:gnuradio/SSB.grc][实例]] ：
   [[file:modulation.org_imgs/20170830_083300_2670Fqr.png]]

   [[https://www.dsprelated.com/showarticle/176.php][一个详细的SSB参考资料]]

*** USB模拟解调（SYNCHRONOUS DETECTION）：
    [[file:modulation.org_imgs/20170831_101928_11354KlK.png]]

*** USB数字解调（SYNCHRONOUS DETECTION）：
    [[file:modulation.org_imgs/20170831_102117_11354XvQ.png]]

*** LSB模拟解调（SYNCHRONOUS DETECTION）：
    [[file:modulation.org_imgs/20170831_102359_11354k5W.png]]

    simple ‘down-convert and lowpass filter’ synchronous detection demodulation process works for both USB and LSB transmitted signals. 

*** 相位方法QUADRATURE PROCESSING――使用Hilbert
    [[file:modulation.org_imgs/20170831_103029_11354xDd.png]]
    需要理解[[file:Math/Hilbert.org][希尔伯特变换]]， 只有这种解调方法才能充分发挥SSB的频带利用率高的特点。
    进而可以借助例子理解这种解调的原理；Weaver demodulator 是先得到信号的IQ两路，相当于下图中 Hilbert 变换在 sin 支路的最前面。
    [[file:modulation.org_imgs/20170831_143630_11354_cS.png]]
** FM

   将 ref:eq-sFMt 式下变频后，写成实际的采样信号的形式：

   \begin{equation}\label{eq-sFM_downt}
   s_{\text{FM\_d}}(t_n)=A\cos[2\pi k_f\sum_{i=-\infty}^n 1/f_s x(t_i)]
   \end{equation}

   其复信号表示为：

   \begin{equation}
   s_\text{FM\_d}(t_n)=A\exp[j2\pi k_f\sum_{i=-\infty}^n 1/f_s x(t_i)]
   \end{equation}

   解调FM信号首先要通过微分运算得出，在数字运算中，使用差分，具体做法是
   \begin{equation}
s_\text{FM\_d}(t_n)*\text{conj}(s_\text{FM\_d}(t_{n-1}))=A\exp[j2\pi k_f 1/f_s x(t_n)]
\end{equation}

   取信号的幅角为： $\frac{2\pi k_f}{f_s}x(t_n)$ ，即恢复出了原信号。
   经过实验，在GNU Radio 中，延迟、共轭相乘、取幅角的效果和WBFM receiver 的效果相当：
   [[file:modulation.org_imgs/20170904_200120_4299KbN.png]]



* 参考资料
  优质的GNU radio 及信号相关的入门资料： http://www.ece.uvic.ca/~elec350
* Footnotes

[fn:5] 频率的变化范围跟调制信号的频率无关，只受信号幅度的影响，信号幅度越大，已调信号的频率变化范围就越大。


[fn:4] http://www2.ensc.sfu.ca/people/faculty/ho/ENSC327/Pre_10_Bessel.pdf

[fn:3] https://www.johndcook.com/blog/bessel_functions/

[fn:2] https://www.johndcook.com/blog/2016/02/17/analyzing-an-fm-signal/

[fn:1] https://www.st-andrews.ac.uk/~www_pa/Scots_Guide/RadCom/part12/page1.html






  bibliography:~/References/bibliography/refs.bib
